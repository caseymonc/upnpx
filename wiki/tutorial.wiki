#labels upnpx,tutorial
Good UPnP documentation is available at at the website http://upnp.org.
The architecture is described in the following document [http://upnp.org/specs/arch/UPnP-arch-DeviceArchitecture-v1.1.pdf UPNP Device Architecture Document]  

A UPnP session exist of several stages: 
 * 0. Addressing
 * 1. Discovery 
 * 2. Description
 * 3. Control 
 * 4. Eventing
 * 5. Presentation

upnpx is an implementation of the UPnP specification and has API functions for the different stages. This tutorial give simple examples how to use the upnpx API in order to build your own UPnP client. The tutorial handles the 6 individual steps and starts at [tutaddressing Step 0. Addressing].

Jump to :
 * [TutorialAddressing Step 0. Addressing]
 * [TutorialDiscovery Step 1. Discovery ]
 * [TutorialDescription Step 2. Description]
 * [TutorialControl Step 3. Control ]
 * [TutorialEventing Step 4. Eventing]
 * [TutorialPresentation Step 5. Presentation]


=== 0. Addressing ===

According to the specs : _"Through addressing, devices and control points get a network address"_
In our case it means that your device have to get an IP address, since the OS handles this task we are lucky and don't have to do much. Just be sure you actually are connected to the network and have an IP address before using upnpx.

=== 1. Discovery ===

During the discovery step we will search for any UPnP device on the local network. upnpx implements the ssdp protocol (Simple Device Discovery Protocol) and maintains an in memory database of all devices on the network, it  will automatically update this database when new devices are added or removed.

In code:

Get a pointer to the discovery database via the UPnPManager: 

{{{
#import "UPnPManager.h"
#import "UPnPDB.h"

UPnPDB* db = [[UPnPManager GetInstance] DB];
[db addObserver:(UPnPDBObserver*)self];

//
// Interface UPnPDBObserver
//
-(void)UPnPDBWillUpdate:(UPnPDB*)sender{

}
-(void)UPnPDBUpdated:(UPnPDB*)sender{

}

}}}

=== Description ===
=== Control ===
=== Eventing ===
=== Presentation ===