#labels upnp,tutorial,control
#sidebar TutorialIndex

== 3. Control ==

 _ {UPnP specifications: "Through control, control points invoke actions on devices and poll for values."}_

This is an interesting step since we actually will read and set device properties. Example for [http://code.google.com/p/upnpx/source/browse/trunk/src/api/MediaServer1Device.h MediaServer] devices we will be able to query the media on the device in different ways, browse, search, get icons etc. And for example for [http://code.google.com/p/upnpx/source/browse/trunk/src/api/MediaRenderer1Device.h MediaRenderers] we will have methods to play content, pause, change volume etc. 

The exact capabilities for a device are defined by the UPnP Standard or by the vendor, upnpx provide an Objective-C interface for all specified service functions. 
<br><br> 

*Example: !MediaServer1*

This section demonstrates how to write a !MediaServer control in order to browse its media data.

Screenshots from [http://code.google.com/p/upnpx/source/browse/#svn%2Ftrunk%2Fprojects%2Fiphone-xcode_3.n%2Fupnpxdemo upnpxdemo.xcodeproj]

http://upnpx.googlecode.com/svn/wiki/images/demo_screen_1.png
http://upnpx.googlecode.com/svn/wiki/images/demo_screen_3.png


<br><br>
The first thing to do is to take look at the !MediaServer-v1 device specifications, these are defined in the following template: [http://www.upnp.org/specs/av/UPnP-av-MediaServer-v1-Device.pdf http://www.upnp.org/specs/av/UPnP-av-MediaServer-v1-Device.pdf]

UPnP devices expose Actions and Events through services, so you need to find and choose the desired Service Type that offers the functionality you want to achieve.

For our example [http://www.upnp.org/specs/av/UPnP-av-MediaServer-v1-Device.pdf MediaServer:1] the supported Service Types are listed under "2.2 Device Requirements":
 * [http://www.upnp.org/specs/av/UPnP-av-ContentDirectory-v1-Service.pdf ContentDirectory:1.0]
 * [http://www.upnp.org/specs/av/UPnP-av-ConnectionManager-v1-Service.pdf ConnectionManager:1.0]
 * [http://www.upnp.org/specs/av/UPnP-av-AVTransport-v1-Service.pdf AVTransport:1.0]

<br><br>
After examining the specifications you will see that the [http://www.upnp.org/specs/av/UPnP-av-ContentDirectory-v1-Service.pdf ContentDirectory:1.0] service offers an Action, under *2.7.4. Browse*, to browse the data on a device.  

The *Browse* action defines a set of input and output parameters, read the specifications to understand their meaning. upnpx implements the *Browse* action  (as well as all other Actions) with the exact same parameters, the usage of the parameters is defined by the specifications.

<br><br>
Now we decided we need access to the *Browse* Action, we need to know how to achieve this in upnpx. Well, like the other things, it is not too difficult, call it easy.

1. First you need the [http://code.google.com/p/upnpx/source/browse/trunk/src/api/MediaServer1Device.h MediaServer1Device] pointer you got from [TutorialDescription Step 2. Description].

{{{
...
BasicUPnPDevice *device = [mDevices objectAtIndex:indexPath.row];
    if([[device urn] isEqualToString:@"urn:schemas-upnp-org:device:MediaServer:1"]){
        MediaServer1Device *server = (MediaServer1Device*)device;
        //We are ready to call control-methods on the server device
    }
...
}}}

2. The [http://code.google.com/p/upnpx/source/browse/trunk/src/api/MediaServer1Device.h MediaServer1Device] defines 3 properties to access the Services. 
{{{
-(SoapActionsAVTransport1*)avTransport;
-(SoapActionsConnectionManager1*)connectionManager;
-(SoapActionsContentDirectory1*)contentDirectory;
}}}

Use the one you need, in our case it is {{{[server contentDirectory]}}}

3. Call the desired Actions. All actions defined in [http://www.upnp.org/specs/av/UPnP-av-ContentDirectory-v1-Service.pdf ContentDirectory:1.0] are available as Methods in the [http://code.google.com/p/upnpx/source/browse/trunk/src/api/SoapActionsContentDirectory1.h SoapActionsContentDirectory1] class.

In our case we want to use the, somewhat complexer, *BrowseWithObjectID* Action. Note that upnpx follows the Objective-C conventions and add the name of the first argument as a postfix to the method (Action) name : *Browse _WithObjectID_*
{{{
-(int)BrowseWithObjectID:(NSString*)objectid BrowseFlag:(NSString*)browseflag Filter:(NSString*)filter StartingIndex:(NSString*)startingindex RequestedCount:(NSString*)requestedcount SortCriteria:(NSString*)sortcriteria OutResult:(NSMutableString*)result OutNumberReturned:(NSMutableString*)numberreturned OutTotalMatches:(NSMutableString*)totalmatches OutUpdateID:(NSMutableString*)updateid;
}}}

This is an example from [http://code.google.com/p/upnpx/source/browse/#svn%2Ftrunk%2Fprojects%2Fiphone-xcode_3.n%2Fupnpxdemo upnpxdemo.xcodeproj] that demonstrates how to handle the input and output parameters (it is done via NSMutableString objects):
{{{
    //Allocate NMSutableString's to read the results
    NSMutableString *outResult = [[NSMutableString alloc] init];
    NSMutableString *outNumberReturned = [[NSMutableString alloc] init];
    NSMutableString *outTotalMatches = [[NSMutableString alloc] init];
    NSMutableString *outUpdateID = [[NSMutableString alloc] init];
    
    [[m_device contentDirectory] BrowseWithObjectID:m_rootId BrowseFlag:@"BrowseDirectChildren" Filter:@"*" StartingIndex:@"0" RequestedCount:@"0" SortCriteria:@"+dc:title" OutResult:outResult OutNumberReturned:outNumberReturned OutTotalMatches:outTotalMatches OutUpdateID:outUpdateID];  
        
    ... <snip>...

    [outResult release];
    [outNumberReturned release];
    [outTotalMatches release];
    [outUpdateID release];
}}}


All Actions for all services work in a similar way. Mostly it is enough to call them with the right parameters (check the specs for that) and the device will act on your commands.

For this demo, the *Browse* Action returns a somewhat complicated result in *outResult* in the form of  DIDL Xml. upnpx has some helper code to parse that DIDL result into an array with usable objects: 
{{{
- (void)viewDidLoad {
    [super viewDidLoad];

    //Allocate NMSutableString's to read the results
    NSMutableString *outResult = [[NSMutableString alloc] init];
    NSMutableString *outNumberReturned = [[NSMutableString alloc] init];
    NSMutableString *outTotalMatches = [[NSMutableString alloc] init];
    NSMutableString *outUpdateID = [[NSMutableString alloc] init];
    
    [[m_device contentDirectory] BrowseWithObjectID:m_rootId BrowseFlag:@"BrowseDirectChildren" Filter:@"*" StartingIndex:@"0" RequestedCount:@"0" SortCriteria:@"+dc:title" OutResult:outResult OutNumberReturned:outNumberReturned OutTotalMatches:outTotalMatches OutUpdateID:outUpdateID];  
        
    //The collections are returned as DIDL Xml in the string 'outResult'
    //upnpx provide a helper class to parse the DIDL Xml in an Array of usable MediaServer1BasicObject objects
    [m_playList removeAllObjects];
    NSData *didl = [outResult dataUsingEncoding:NSUTF8StringEncoding]; 
    MediaServerBasicObjectParser *parser = [[MediaServerBasicObjectParser alloc] initWithMediaObjectArray:m_playList itemsOnly:NO];
    [parser parseFromData:didl];
    [parser release];
    //Playlist contains a collection of usable MediaServer1BasicObject's now. 
    //Check the type and cast them to MediaServer1ContainerObject or MediaServer1ItemObject to have full access to the information
    //Example:
    //MediaServer1BasicObject *item = [m_playList objectAtIndex:0];
    //if([[m_playList objectAtIndex:0] isContainer]){
    //  MediaServer1ContainerObject *container = (MediaServer1ContainerObject*)[m_playList objectAtIndex:0];
    //}else{
    //  MediaServer1ItemObject *item = (MediaServer1ItemObject*)[m_playList objectAtIndex:0];
    //}
        
    
    [outResult release];
    [outNumberReturned release];
    [outTotalMatches release];
    [outUpdateID release];
    
    self.title = m_title;
}
}}}


Check the [http://code.google.com/p/upnpx/source/browse/#svn%2Ftrunk%2Fprojects%2Fiphone-xcode_3.n%2Fupnpxdemo upnpxdemo] project, and especially the [http://code.google.com/p/upnpx/source/browse/trunk/projects/iphone-xcode_3.n/upnpxdemo/FolderView.m FolderView.m], for the full implementation. 


Next [TutorialEventing Step 4. Eventing]